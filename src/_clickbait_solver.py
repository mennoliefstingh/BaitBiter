import openai
import os
import requests

from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import TextFormatter

from openai.error import OpenAIError


class ClickbaitVideo:
    """
    A class that represents a clickbaity YouTube video that can use GPT-3 to generate the question
    that arises from the video title and an answer to that question based on the video transcript.

    Attributes:
        yt_url (str):    The YouTube video URL
        api_key (str):   An OpenAI API key for the GPT-3 model
        video_id (str):  The YouTube video ID
        title (str):     The title of the YouTube video
        transcript(str): A transcript of the video based on human- or autogenerated subtitles
        question(str):   A GPT3-powered transformation of the video title into a question
        question_answer(str): A GPT3-generated answer to the question, based on the video transcript

    Methods:
        Public:
            answer_title_question(): A method that returns the generated title question and the answer to it
        Private:
            _generate_question_from_title() -> str: A method that returns just the question that arises from the title.
            _fetch_title() -> str: A private method that uses the OEmbed-API to fetch the video title.


    """

    def __init__(
        self,
        yt_url: str,
        api_key: str,
        question_model: str = "text-davinci-003",
        answer_model: str = "text-curie-001",
    ):
        self.yt_url = yt_url

        self.api_key = api_key

        self.question_model = question_model
        self.answer_model = answer_model

        self.video_id = yt_url.split("=")[-1].split("?")[0]
        self.title = self._fetch_title()
        self.transcript = self._get_transcript()
        self.question = self._generate_question_from_title()

    def answer_title_question(self) -> str:
        try:
            completion = openai.Completion.create(
                model=self.answer_model,
                prompt=f"""
            I will give you a transcript of a YouTube video. Afterwards, I will ask you a question pertaining to this video. You will answer this question. 
            Transcript: [{self.transcript}]

            Question: [{self.question}]
            Answer: """,
                max_tokens=100,
            )
        except OpenAIError as error:
            return f"OpenAI returned an error, most likely because the video transcript is too long. Error message:\n {error}"

        return completion.choices[0].text

    def _generate_question_from_title(self, gpt_model="text-davinci-003") -> str:
        completion = openai.Completion.create(
            model=gpt_model,
            prompt=f"""
        The title of a YouTube video is [{self.title}]. Think of the first question that comes
        to mind when reading this title.
        I will now list a few examples of how these questions can arise from titles:
        If the title is already a clear question, return an exact to the letter copy of the title.
        When a title says that something has changed but does not specify why it changed,
        a logical question is what the reason for that change is.
        When the title indicates the status of an object, such as [thing] is the most [adjective],
        a logical question is why the object has that status.
        Answer: """,
            max_tokens=100,
        )

        return completion.choices[0].text

    def _fetch_title(self) -> str:
        response = requests.get(
            f"https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v={self.video_id}&format=json"
        )
        data = response.json()
        return data["title"]

    def _get_transcript(self) -> str:
        transcript = YouTubeTranscriptApi.get_transcript(self.video_id)
        return TextFormatter().format_transcript(transcript).replace("\n", " ")


video = ClickbaitVideo("https://www.youtube.com/watch?v=OGfizdtpAA8", os.getenv("OPENAI_API_KEY"))

print(video.question)
print(video.answer_title_question())
